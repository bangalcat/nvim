{
  // Place your snippets for elixir here. Each snippet is defined under a snippet name and has a prefix, body and
  // description. The prefix is what is used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
  // $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. Placeholders with the
  // same ids are connected.
  // Example:
  // "Print to console": {
  // 	"prefix": "log",
  // 	"body": [
  // 		"console.log('$1');",
  // 		"$2"
  // 	],
  // 	"description": "Log output to console"
  // }
  "def inline": {
    "description": "inline def define",
    "prefix": "defi",
    "body": [
      "def ${1:function}(${2:args}), do: ${3:body}"
    ]
  },
  "defp inline": {
    "description": "inline defp define",
    "prefix": "defpi",
    "body": "defp ${1:function}(${2:args}), do: ${3:body}"
  },
  "ii": {
    "prefix": "ii",
    "body": "IO.inspect($1)",
    "description": "IO.inspect"
  },
  "iib": {
    "prefix": "iib",
    "body": "IO.inspect(binding(), label: \"binding() #{__MODULE__}:#{__ENV__.line} #{DateTime.utc_now}\", limit: :infinity)",
    "description": "IO.inspect() binding() with module name & line number"
  },
  "iil": {
    "prefix": "iil",
    "body": "IO.inspect(label: \"$1\")",
    "description": "IO.inspect(label: ...)"
  },
  "iill": {
    "prefix": "iill",
    "body": "IO.inspect(label: \"${1:message; }#{String.replace_leading(\"#{__ENV__.file}\", \"#{File.cwd!()}\",\"\")|> Path.relative()}:#{__ENV__.line()}\")",
    "description": "IO.inspect(label: \"<optional message>; Module:line_nr\")"
  },
  ":": {
    "prefix": "kva",
    "body": "${2:key}: ${3:value}$1",
    "description": "key: value"
  },
  "::": {
    "prefix": "kvs",
    "body": "${2:key} => ${3:value}$1",
    "description": "key => value"
  },
  "p": {
    "prefix": "p",
    "body": "|> $0",
    "description": "your favorite pipeline (|>)",
    "luasnip": {
      "priority": 5000
    }
  },
  "ok": {
    "prefix": "ok",
    "body": "{:ok, $2} $1",
    "description": "{:ok, ... } ..."
  },
  "err": {
    "prefix": "error",
    "body": "{:error, $2} $1",
    "description": "{:error, ... } ..."
  },
  // "Plain Module": {
  //   "prefix": "defmo",
  //   "description": [
  //     "Generates the namespace for a file.",
  //     "e.g. A file with the path `lib/foo/bar/baz/boing.ex` would resolve to Foo.Bar.Baz.Boing."
  //   ],
  //   "body": [
  //     "defmodule ${RELATIVE_FILEPATH/^([^\\/\\\\]+[\\/\\\\])|(\\.ex|\\.exs)$|([^._\\/\\\\]+)|_|([\\/\\\\])/${3:/capitalize}${4:+.}/g} do",
  //     "\t$0",
  //     "end"
  //   ]
  // },
  "My GenServer": {
    "prefix": "gs",
    "body": [
      "defmodule ${4:package}.${1:name} do",
      "\tuse GenServer",
      "\trequire Logger",
      "",
      "\t@me __MODULE__",
      "",
      "\tdef start_link(${2:opts}) do",
      "\t\t{:ok, pid} = result = GenServer.start_link(@me, ${2:opts}, name: @me)",
      "\t\tLogger.debug(\"#{@me} GenServer started with# #{inspect(pid)}.\")",
      "\t\tresult",
      "\tend",
      "",
      "\tdef init(${3:initial_state}) do",
      "\t\t{:ok, ${3:initial_state}}",
      "\tend",
      "",
      "\t$0",
      "end"
    ],
    "description": "My GenServer"
  },
  "GenServer Cast": {
    "prefix": "gscast",
    "body": [
      "def ${1:function}() do",
      "\tGenServer.cast(@me, :${1:function})",
      "end",
      "",
      "${0}"
    ],
    "description": "GenServer cast function"
  },
  "GenServer Call": {
    "prefix": "gscall",
    "body": [
      "def ${1:function}() do",
      "\tGenServer.call(@me, :${1:function})",
      "end",
      "",
      "${0}"
    ],
    "description": "GenServer call function"
  },
  "ExUnit": {
    "prefix": [
      "ex_unit",
      "exu"
    ],
    "body": [
      "defmodule ${RELATIVE_FILEPATH/^([^\\/\\\\]+[\\/\\\\])|(\\.ex|\\.exs)$|([^._\\/\\\\]+)|_|([\\/\\\\])/${3:/capitalize}${4:+.}/g} do",
      "\tuse ExUnit.Case",
      "\tdoctest$1",
      "",
      "\tdescribe \"${2:description_of_tests}\" do",
      "\t\ttest \"${3:definition_of_this_test}\" do",
      "\t\tend",
      "\tend",
      "end"
    ],
    "description": "Insert code for a ExUnit"
  },
  "LiveViewLiveComponent": {
    "prefix": "lvc",
    "body": [
      "defmodule ${1:module} do",
      "\t@moduledoc \"\"\"",
      "\t${2:module_doc}",
      "\t\"\"\"",
      "\tuse Phoenix.LiveComponent",
      "",
      "\t@impl true",
      "\tdef update(_assigns, socket) do",
      "\t\t{:ok, socket}",
      "\tend",
      "",
      "\t@impl true",
      "\tdef render(assigns) do",
      "\t\t~L\"\"\"",
      "\t\t${0}",
      "\t\t\"\"\"",
      "\tend",
      "end"
    ]
  },
  "LiveView": {
    "prefix": "lv",
    "body": [
      "defmodule ${1:module} do",
      "\t@moduledoc \"\"\"",
      "\t${2:module_doc}",
      "\t\"\"\"",
      "\tuse Phoenix.LiveView",
      "",
      "\t@impl true",
      "\tdef mount(_params, _session, socket) do",
      "\t\t{:ok, socket}",
      "\tend",
      "",
      "\t@impl true",
      "\tdef handle_params(_params, _url, socket) do",
      "\t\t{:noreply, socket}",
      "\tend",
      "",
      "\t@impl true",
      "\tdef render(assigns) do",
      "\t\t~L\"\"\"",
      "\t\t${0}",
      "\t\t\"\"\"",
      "\tend",
      "end"
    ]
  },
  "LiveViewHandleEvent": {
    "prefix": "lvhe",
    "body": [
      "@impl true",
      "def handle_event(\"${1:event}\", %{\"${2:var}\" => ${2:var}} = _params, socket) do",
      "\t${0}",
      "\t{:noreply, socket}",
      "end"
    ]
  },
  "LiveViewHandleInfo": {
    "prefix": "lvhi",
    "body": [
      "@impl true",
      "def handle_info(${1:event}, socket) do",
      "\t${0}",
      "\t{:noreply, socket}",
      "end"
    ]
  },
  "LiveViewHandleParams": {
    "prefix": "lvhp",
    "body": [
      "@impl true",
      "def handle_params(${1:params}, ${2:_uri}, socket) do",
      "\t${0}",
      "\t{:noreply, socket}",
      "end"
    ]
  },
  "HEEX Sigil": {
    "prefix": "hs",
    "body": [
      "~H\"\"\"",
      "${0}",
      "\"\"\""
    ]
  },
  "Verified Routes Sigil": {
    "prefix": "ps",
    "body": [
      "~p\"/${1}\"",
    ]
  },
  "LiveView Function Component": {
    "prefix": "defc",
    "body": [
      "def ${1:function}(assigns) do",
      "\t~H\"\"\"",
      "\t${2}",
      "\t\"\"\"",
      "end"
    ]
  },
  "LiveView Function Component Attrs": {
    "prefix": "attr",
    "body": [
      "attr :${1:class}, :${2:string}${3:, required: true}"
    ]
  },
  "LiveView Function Component Slots": {
    "prefix": "slot",
    "body": [
      "slot :${1:inner_block}"
    ]
  }
}
